[
  {
    "bookSourceComment": "pixiv本体",
    "bookSourceGroup": "pixiv",
    "bookSourceName": "pixiv",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.pixiv.net/novel/",
    "bookUrlPattern": "",
    "customOrder": 0,
    "enabled": true,
    "enabledCookieJar": false,
    "enabledExplore": false,
    "enabledReview": false,
    "exploreUrl": "",
    "header": "",
    "lastUpdateTime": 1673700179059,
    "loginUrl": "https://accounts.pixiv.net/login",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "author",
      "coverUrl": "coverUrl",
      "init": "@js:\n\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(() => {\n    let res = JSON.parse(result).body\n    info = {}\n    info.author = book.author\n    info.name = book.name\n    info.tags = book.kind\n    info.wordCount = book.wordCount\n    info.latestChapter = null\n    info.desc = book.intro\n    info.coverUrl = book.coverUrl\n    info.catalogUrl = util.urlNovelDetailed(res.id)\n    return info\n})();",
      "intro": "desc",
      "name": "name",
      "tocUrl": "catalogUrl",
      "kind": "tags",
      "wordCount": "wordCount"
    },
    "ruleContent": {
      "content": "@js:\n(() => {\n    let res = JSON.parse(result).body\n    let content = res.content\n\n    let hasEmbeddedImages = res.textEmbeddedImages !== undefined && res.textEmbeddedImages !== null\n    if (hasEmbeddedImages) {\n        Object.keys(res.textEmbeddedImages).forEach((key) => {\n            //todo 使用了linpx的图片代理 目前只能想到这样解决\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"https://linpxapi.linpicio.com/proxy/pximg?url=${res.textEmbeddedImages[key].urls.original}\">`)\n        })\n    }\n    return content\n})()",
      "nextContentUrl": ""
    },
    "ruleExplore": {},
    "ruleSearch": {
      "author": "userName",
      "bookList": "@js:\n\nvar util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction urlCoverUrl(url) {\n    return `${url},{\"headers\": {\"Referer\":\"https://www.pixiv.net/\"}}`\n}\n\n// 存储seriesID\nvar seriesSet = new Set();\n\n// 将多个长篇小说解析为一本书\nfunction combineNovels(novels) {\n    return novels.filter(novel => {\n        //单本直接解析为一本书\n        if (novel.seriesId === undefined || novel.seriesId === null) {\n            return true\n        }\n\n        //集合中没有该系列解析为一本书\n        if (!seriesSet.has(novel.seriesId)) {\n            seriesSet.add(novel.seriesId)\n            return true\n        }\n\n        return false\n    })\n}\n\n//处理novels列表\n//查询作者\nfunction handNovels(novels) {\n    novels.forEach(novel => {\n        if (novel.tags === undefined || novel.tags === null) {\n            novel.tags = []\n        }\n\n        if (novel.seriesId === undefined || novel.seriesId === null) {\n            novel.tags.unshift(\"单本\")\n        } else {\n            novel.tags.unshift(\"长篇\")\n            // todo 暂时不做字数统计\n            novel.textCount = null\n        }\n    })\n    return novels\n}\n\nfunction formatNovels(novels) {\n    novels.forEach(novel => {\n        novel.detailedUrl = util.urlNovelDetailed(novel.id)\n        novel.tags = novel.tags.join(\",\")\n        novel.coverUrl = urlCoverUrl(novel.url)\n    })\n    return novels\n}\n\n// 暂时不做\nfunction getUserNovels(username) {\n    return []\n}\n\n// 存储函数方便其他页面调用\nfunction init() {\n    let u = {}\n\n    u.cacheGetAndSet = (key, supplyFunc) => {\n        let v = cache.get(key)\n        if (v === undefined || v === null) {\n            v = JSON.stringify(supplyFunc())\n            // 缓存10分钟\n            cache.put(key, v, 600)\n        }\n        return JSON.parse(v)\n    }\n    u.debugFunc = (func) => {\n        if (String(source.getVariable()) === \"debug\") {\n            func()\n        }\n    }\n\n    u.urlNovelDetailed = (nid) => {\n        return `https://www.pixiv.net/ajax/novel/${nid}`\n    }\n    u.urlSeries = (seriesId) => {\n        return `https://www.pixiv.net/ajax/novel/series/${seriesId}?lang=zh`\n    }\n    u.urlSeriesNovels = (seriesId, limit, offset) => {\n        if (limit > 30) {\n            limit = 30\n        }\n\n        if (limit < 10) {\n            limit = 10\n        }\n\n        return `https://www.pixiv.net/ajax/novel/series_content/${seriesId}?limit=${limit}&last_order=${offset}&order_by=asc&lang=zh`\n    }\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\n(() => {\n    //作者 TAG 书名都要支持\n    init()\n    let resp = JSON.parse(result);\n    let novelsList = getUserNovels(String(java.get(\"key\")))\n    novelsList = novelsList.concat(resp.body.novel.data)\n    return formatNovels(handNovels(combineNovels(novelsList)))\n})();",
      "bookUrl": "detailedUrl",
      "coverUrl": "coverUrl",
      "intro": "description",
      "kind": "tags",
      "lastChapter": "latestChapter",
      "name": "title",
      "wordCount": "textCount"
    },
    "ruleToc": {
      "chapterList": "@js:\n\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction seriesHandler(res) {\n    const limit = 30\n    let returnList = [];\n    let seriesID = res.seriesNavData.seriesId\n    let allChaptersCount = (() => {\n        let result = util.cacheGetAndSet(util.urlSeries(seriesID), () => {\n            return JSON.parse(java.ajax(util.urlSeries(seriesID)))\n        }).body.total\n        util.debugFunc(() => {\n            java.log(`本目录一共有:${result} 章节`);\n        })\n        return result;\n    })();\n\n    //发送请求获得相应数量的目录列表\n    function sendAjaxForGetChapters(lastIndex) {\n        let url = util.urlSeriesNovels(seriesID, limit, lastIndex)\n        res = util.cacheGetAndSet(url, () => {\n            return JSON.parse(java.ajax(url))\n        })\n        res = res.body.page.seriesContents\n        res.forEach(v => {\n            v.chapterUrl = util.urlNovelDetailed(v.id)\n        })\n        return res;\n    }\n\n    //逻辑控制者 也就是使用上面定义的两个函数来做对应功能\n    //要爬取的总次数\n    let max = (allChaptersCount / limit) + 1\n    for (let i = 0; i < max; i++) {\n        //java.log(\"i的值:\"+i)\n        let list = sendAjaxForGetChapters(i * limit);\n        //取出每个值\n        returnList.concat(list)\n    }\n    return returnList\n}\n\nfunction aloneHandler() {\n    return [{title: book.name, chapterUrl: baseUrl}]\n}\n\n(() => {\n    let res = JSON.parse(result).body\n    if (res.seriesNavData === null || res.seriesNavData === undefined) {\n        return aloneHandler()\n    }\n    return seriesHandler(res)\n})()",
      "chapterName": "title",
      "chapterUrl": "chapterUrl"
    },
    "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://www.pixiv.net/ajax/search/novels/${encodeURI(key)}?word=${encodeURI(key)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`;",
    "weight": 0
  }
]