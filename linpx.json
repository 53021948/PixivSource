[
  {
    "bookSourceComment": "linpx是pixiv的子集 包含所有兽人小说",
    "bookSourceGroup": "pixiv",
    "bookSourceName": "linpx",
    "bookSourceType": 0,
    "bookSourceUrl": "https://www.furrynovel.xyz",
    "customOrder": 0,
    "enabled": true,
    "enabledCookieJar": false,
    "enabledExplore": true,
    "enabledReview": false,
    "exploreUrl": "最新小说::https://linpxapi.linpicio.com/pixiv/novels/recent?page={{page}}",
    "lastUpdateTime": 1673413918552,
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "author",
      "coverUrl": "cover_url",
      "init": "@js:\n(function (res) {\n    res = JSON.parse(res)\n    let prop = {}\n    prop['author'] = book.author\n    prop['count'] = book.wordCount\n    prop['desc'] = book.intro\n    prop['cover_url'] = book.coverUrl\n\n    if (res.series === undefined || res.series === null) {\n        prop['name'] = res.title\n        prop['catalog'] = `https://linpxapi.linpicio.com/pixiv/novel/${res.id}`\n        res.tags.unshift('单本')\n    } else {\n        prop['name'] = res.series.title\n        res.tags.unshift('长篇')\n        prop['catalog'] = `https://linpxapi.linpicio.com/pixiv/series/${res.series.id}`\n    }\n    prop['classes'] = res.tags.join(\",\")\n    return prop\n})(result)",
      "intro": "desc",
      "kind": "classes",
      "lastChapter": "latest_chapter",
      "name": "name",
      "tocUrl": "catalog",
      "wordCount": "count"
    },
    "ruleContent": {
      "content": "@js:\n(function (res) {\n    res = JSON.parse(res)\n    let content = res.content\n    //链接替换 如果有的话\n    if (res.images !== undefined && res.images !== null) {\n        Object.keys(res.images).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"https://linpxapi.linpicio.com/proxy/pximg?url=${res.images[key].preview}\">`)\n        })\n    }\n    return content\n})(result)",
      "replaceRegex": "",
      "sourceRegex": ""
    },
    "ruleExplore": {
      "author": "userName",
      "bookList": "@js:\n\nfunction urlSeries(seriesId) {\n    return `https://linpxapi.linpicio.com/pixiv/series/${seriesId}`\n}\n\nfunction urlNovelsDetailed(nidList) {\n    return `https://linpxapi.linpicio.com/pixiv/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\n\nfunction getAjaxJson(url) {\n    return cacheGetAndSet(url, () => {\n        return JSON.parse(java.ajax(url))\n    })\n}\n\nfunction cacheGetAndSet(key, supplyFunc) {\n    let v = cache.get(key)\n    if (v === undefined || v === null) {\n        v = JSON.stringify(supplyFunc())\n        // 缓存10分钟\n        cache.put(key, v, 600)\n    }\n    return JSON.parse(v)\n}\n\n// 存储seriesID\nvar seriesSet = new Set();\n\n// 将多个长篇小说解析为一本书\nfunction combineNovels(novels) {\n    let newNovels = []\n    // key为seriesId value为novel\n    novels.forEach(novel => {\n        // 视为真正的一本书\n        if (novel.seriesId !== undefined && novel.seriesTitle !== undefined) {\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                newNovels.push(novel)\n            }\n        } else {\n            // 短篇小说\n            newNovels.push(novel)\n        }\n    })\n    return newNovels\n}\n\n// 将小说的封面规则与详情地址替换\nfunction formatNovels(novels) {\n    novels.forEach(novel => {\n        novel.detailedUrl = `https://linpxapi.linpicio.com/pixiv/novel/${novel.id}`\n        if (novel.seriesId !== undefined && novel.seriesId !== null) {\n            novel.title = novel.seriesTitle\n            //todo 长篇的字数需要统计 先不做\n            novel.length = null\n\n            let series = getAjaxJson(urlSeries(novel.seriesId))\n            // novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${series.imageUrl}`\n            // 后端目前没有系列的coverUrl字段\n            // todo 先这样使用\n            novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${series.novels[0].coverUrl}`\n            if (series.caption === \"\") {\n                let firstNovels = getAjaxJson(urlNovelsDetailed([series.novels[0].id]))\n                novel.desc = firstNovels[0].desc\n            } else {\n                novel.desc = series.caption\n            }\n\n            //如果没有标签 取第一章的tag\n            if (series.tags.length === 0) {\n                // 系列至少会有一章\n                novel.tags = series.novels[0].tags\n            } else {\n                novel.tags = series.tags\n            }\n            novel.tags.unshift(\"长篇\")\n\n\n        } else {\n            novel.tags.unshift(\"单本\")\n            novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${novel.coverUrl}`\n        }\n\n        novel.tags = novel.tags.join(\",\")\n    })\n    return novels\n}\n\n\n(function (res) {\n    return formatNovels(combineNovels(JSON.parse(res)))\n}(result))",
      "bookUrl": "detailedUrl",
      "coverUrl": "coverUrl",
      "intro": "desc",
      "kind": "tags",
      "lastChapter": "",
      "name": "title",
      "wordCount": "length"
    },
    "ruleSearch": {
      "author": "userName",
      "bookList": "@js:\n\nfunction urlSearchUsers(username) {\n    return `https://linpxapi.linpicio.com/pixiv/search/user/${username}`\n}\n\nfunction urlUserDetailed(uidList) {\n    return `https://linpxapi.linpicio.com/pixiv/users?${uidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\n\nfunction urlNovelsDetailed(nidList) {\n    return `https://linpxapi.linpicio.com/pixiv/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n}\n\nfunction urlSeries(seriesId) {\n    return `https://linpxapi.linpicio.com/pixiv/series/${seriesId}`\n}\n\nfunction cacheGetAndSet(key, supplyFunc) {\n    let v = cache.get(key)\n    if (v === undefined || v === null) {\n        v = JSON.stringify(supplyFunc())\n        // 缓存10分钟\n        cache.put(key, v, 600)\n    }\n    return JSON.parse(v)\n}\n\n\nfunction getUser(username, exactMatch) {\n    // 修复传入object的bug\n    username = String(username)\n    let resp = getAjaxJson(urlSearchUsers(username))\n    if (resp.users.length === 0) {\n        return []\n    }\n    if (!exactMatch) {\n        return resp.users\n    }\n    // 只返回用户名完全一样的用户\n    return resp.users.filter(user => {\n        if (user.name === username) {\n            return true\n        }\n    })\n}\n\nfunction getAjaxJson(url) {\n    return cacheGetAndSet(url, () => {\n        return JSON.parse(java.ajax(url))\n    })\n}\n\nfunction getWebviewJson(url) {\n    return cacheGetAndSet(url, () => {\n        let html = java.webView(null, url, null)\n        return JSON.parse((html.match(new RegExp(\">\\\\[\\\\{.*?}]<\"))[0].replace(\">\", \"\").replace(\"<\", \"\")))\n    })\n}\n\n// 包含所有小说数据\nfunction getUserDetailedList(uidList) {\n    // java.log(`UIDLIST:${JSON.stringify(uidList)}`)\n    return getWebviewJson(urlUserDetailed(uidList))\n}\n\nfunction getNovels(nidList) {\n    let page = Number(java.get(\"page\"))\n    // java.log(`NIDLIST:${JSON.stringify(nidList)}`)\n    // 分页\n    let list = nidList.slice((page - 1) * 20, page * 20)\n    if (list.length === 0) {\n        return []\n    }\n\n    return getWebviewJson(urlNovelsDetailed(list))\n}\n\n// 存储seriesID\nvar seriesSet = new Set();\n\n// 将多个长篇小说解析为一本书\nfunction combineNovels(novels) {\n    let newNovels = []\n    // key为seriesId value为novel\n    novels.forEach(novel => {\n        // 视为真正的一本书\n        if (novel.seriesId !== undefined && novel.seriesTitle !== undefined) {\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                newNovels.push(novel)\n            }\n        } else {\n            // 短篇小说\n            newNovels.push(novel)\n        }\n    })\n    return newNovels\n}\n\n// 将小说的封面规则与详情地址替换\nfunction formatNovels(novels) {\n    novels.forEach(novel => {\n        novel.detailedUrl = `https://linpxapi.linpicio.com/pixiv/novel/${novel.id}`\n        if (novel.seriesId !== undefined && novel.seriesId !== null) {\n            novel.title = novel.seriesTitle\n            //todo 长篇的字数需要统计 先不做\n            novel.length = null\n\n            let series = getAjaxJson(urlSeries(novel.seriesId))\n            // novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${series.imageUrl}`\n            // 后端目前没有系列的coverUrl字段\n            // todo 先这样使用\n            novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${series.novels[0].coverUrl}`\n            if (series.caption === \"\") {\n                let firstNovels = getAjaxJson(urlNovelsDetailed([series.novels[0].id]))\n                novel.desc = firstNovels[0].desc\n            } else {\n                novel.desc = series.caption\n            }\n\n            //如果没有标签 取第一章的tag\n            if (series.tags.length === 0) {\n                // 系列至少会有一章\n                novel.tags = series.novels[0].tags\n            } else {\n                novel.tags = series.tags\n            }\n            novel.tags.unshift(\"长篇\")\n\n\n        } else {\n            novel.tags.unshift(\"单本\")\n            novel.coverUrl = `https://linpxapi.linpicio.com/proxy/pximg?url=${novel.coverUrl}`\n        }\n\n        novel.tags = novel.tags.join(\",\")\n    })\n    return novels\n}\n\nfunction findUserNovels(username) {\n    let novelList = []\n    // 查询用户\n    let userArr = getUser(username, true)\n    // 获取用户所有小说\n    let uidList = userArr.filter(user => {\n        return user.novels.length > 0\n    }).map(user => user.id)\n\n    if (uidList.length > 0) {\n        let list = getUserDetailedList(uidList)\n        let nidList = []\n        // 从两层数组中提取novelsId\n        list.forEach(user => {\n            user.novels.forEach(nid => nidList.push(nid))\n        })\n        getNovels(nidList).forEach(novel => {\n            novelList.push(novel)\n        })\n    }\n    return novelList\n}\n\n(function (res) {\n    res = JSON.parse(res)\n    let novels = res.novels\n    findUserNovels(java.get(\"key\")).forEach(v => {\n        novels.push(v)\n    })\n    return formatNovels(combineNovels(novels))\n}(result))",
      "bookUrl": "detailedUrl",
      "coverUrl": "coverUrl",
      "intro": "desc",
      "kind": "tags",
      "name": "title",
      "wordCount": "length"
    },
    "ruleToc": {
      "chapterList": "@js:\n(function (res) {\n    res = JSON.parse(res)\n    if (res.novels !== undefined) {\n        res.novels.forEach(v => {\n            v['url'] = `https://linpxapi.linpicio.com/pixiv/novel/${v.id}`\n        })\n        return res.novels\n    }\n    return [{\n        id: res.id,\n        title: res.title\n    }]\n})(result)",
      "chapterName": "title",
      "chapterUrl": "url"
    },
    "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://linpxapi.linpicio.com/pixiv/search/novel/${encodeURI(key)}?page=${page}`;",
    "weight": 0
  }
]